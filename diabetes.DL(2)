{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0dee6831",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_breast_cancer\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "44ed3b7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
      "0              6      148             72             35        0  33.6   \n",
      "1              1       85             66             29        0  26.6   \n",
      "2              8      183             64              0        0  23.3   \n",
      "3              1       89             66             23       94  28.1   \n",
      "4              0      137             40             35      168  43.1   \n",
      "..           ...      ...            ...            ...      ...   ...   \n",
      "763           10      101             76             48      180  32.9   \n",
      "764            2      122             70             27        0  36.8   \n",
      "765            5      121             72             23      112  26.2   \n",
      "766            1      126             60              0        0  30.1   \n",
      "767            1       93             70             31        0  30.4   \n",
      "\n",
      "     DiabetesPedigreeFunction  Age  Outcome  \n",
      "0                       0.627   50        1  \n",
      "1                       0.351   31        0  \n",
      "2                       0.672   32        1  \n",
      "3                       0.167   21        0  \n",
      "4                       2.288   33        1  \n",
      "..                        ...  ...      ...  \n",
      "763                     0.171   63        0  \n",
      "764                     0.340   27        0  \n",
      "765                     0.245   30        0  \n",
      "766                     0.349   47        1  \n",
      "767                     0.315   23        0  \n",
      "\n",
      "[768 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv(\"C:/Users/biank/Downloads/diabetes (2).csv\")\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3a0699b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>763</th>\n",
       "      <td>10</td>\n",
       "      <td>101</td>\n",
       "      <td>76</td>\n",
       "      <td>48</td>\n",
       "      <td>180</td>\n",
       "      <td>32.9</td>\n",
       "      <td>0.171</td>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>764</th>\n",
       "      <td>2</td>\n",
       "      <td>122</td>\n",
       "      <td>70</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>36.8</td>\n",
       "      <td>0.340</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>765</th>\n",
       "      <td>5</td>\n",
       "      <td>121</td>\n",
       "      <td>72</td>\n",
       "      <td>23</td>\n",
       "      <td>112</td>\n",
       "      <td>26.2</td>\n",
       "      <td>0.245</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>766</th>\n",
       "      <td>1</td>\n",
       "      <td>126</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.1</td>\n",
       "      <td>0.349</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>767</th>\n",
       "      <td>1</td>\n",
       "      <td>93</td>\n",
       "      <td>70</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>30.4</td>\n",
       "      <td>0.315</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>768 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0              6      148             72             35        0  33.6   \n",
       "1              1       85             66             29        0  26.6   \n",
       "2              8      183             64              0        0  23.3   \n",
       "3              1       89             66             23       94  28.1   \n",
       "4              0      137             40             35      168  43.1   \n",
       "..           ...      ...            ...            ...      ...   ...   \n",
       "763           10      101             76             48      180  32.9   \n",
       "764            2      122             70             27        0  36.8   \n",
       "765            5      121             72             23      112  26.2   \n",
       "766            1      126             60              0        0  30.1   \n",
       "767            1       93             70             31        0  30.4   \n",
       "\n",
       "     DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                       0.627   50        1  \n",
       "1                       0.351   31        0  \n",
       "2                       0.672   32        1  \n",
       "3                       0.167   21        0  \n",
       "4                       2.288   33        1  \n",
       "..                        ...  ...      ...  \n",
       "763                     0.171   63        0  \n",
       "764                     0.340   27        0  \n",
       "765                     0.245   30        0  \n",
       "766                     0.349   47        1  \n",
       "767                     0.315   23        0  \n",
       "\n",
       "[768 rows x 9 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c700f096",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop(['Outcome'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "30cad995",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting the data into training and test test\n",
    "X = df.iloc[:,0:8].values\n",
    "y = df.iloc[:,8].values\n",
    "\n",
    "Y = pd.get_dummies(y).values\n",
    "\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test, y_train,y_test = train_test_split(X,Y,test_size=0.2,random_state=0) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "749d7443",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  6.   , 148.   ,  72.   , ...,  33.6  ,   0.627,  50.   ],\n",
       "       [  1.   ,  85.   ,  66.   , ...,  26.6  ,   0.351,  31.   ],\n",
       "       [  8.   , 183.   ,  64.   , ...,  23.3  ,   0.672,  32.   ],\n",
       "       ...,\n",
       "       [  5.   , 121.   ,  72.   , ...,  26.2  ,   0.245,  30.   ],\n",
       "       [  1.   , 126.   ,  60.   , ...,  30.1  ,   0.349,  47.   ],\n",
       "       [  1.   ,  93.   ,  70.   , ...,  30.4  ,   0.315,  23.   ]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a15e30f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0,\n",
       "       1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1,\n",
       "       0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n",
       "       1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n",
       "       1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n",
       "       1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,\n",
       "       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n",
       "       1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,\n",
       "       0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1,\n",
       "       1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1,\n",
       "       1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,\n",
       "       1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0,\n",
       "       1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0,\n",
       "       0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0,\n",
       "       1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n",
       "       0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n",
       "       0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0,\n",
       "       0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0,\n",
       "       0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1,\n",
       "       0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
       "       1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,\n",
       "       1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,\n",
       "       1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n",
       "       0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\n",
       "       0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n",
       "       0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\n",
       "       1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n",
       "       0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n",
       "       0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,\n",
       "       0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0,\n",
       "       0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,\n",
       "       1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0],\n",
       "      dtype=int64)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a55aae40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " dense (Dense)               (None, 64)                576       \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 32)                2080      \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 16)                528       \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 1)                 17        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 3,201\n",
      "Trainable params: 3,201\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras import models, layers, optimizers\n",
    "\n",
    "def build_model():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.Dense(64, activation='relu', input_shape=(8,)))\n",
    "    model.add(layers.Dense(32, activation='relu'))\n",
    "    model.add(layers.Dense(16, activation='relu'))\n",
    "    model.add(layers.Dense(1))\n",
    "    model.compile(loss='mse', optimizer='rmsprop', metrics=['mae'])\n",
    "    return model\n",
    "\n",
    "model = build_model()\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "87e0a373",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "20/20 [==============================] - 2s 33ms/step - loss: 1.5253 - mae: 0.7901 - val_loss: 0.4390 - val_mae: 0.5492\n",
      "Epoch 2/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.5466 - mae: 0.5935 - val_loss: 0.3882 - val_mae: 0.5348\n",
      "Epoch 3/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.6352 - mae: 0.6159 - val_loss: 0.3204 - val_mae: 0.5114\n",
      "Epoch 4/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.4269 - mae: 0.5459 - val_loss: 0.3627 - val_mae: 0.5295\n",
      "Epoch 5/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.3828 - mae: 0.5352 - val_loss: 0.3482 - val_mae: 0.5215\n",
      "Epoch 6/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.4077 - mae: 0.5405 - val_loss: 0.3034 - val_mae: 0.5014\n",
      "Epoch 7/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.3892 - mae: 0.5379 - val_loss: 0.3081 - val_mae: 0.5059\n",
      "Epoch 8/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.3759 - mae: 0.5309 - val_loss: 0.3229 - val_mae: 0.5146\n",
      "Epoch 9/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.3584 - mae: 0.5265 - val_loss: 0.2968 - val_mae: 0.5015\n",
      "Epoch 10/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.3479 - mae: 0.5188 - val_loss: 0.7180 - val_mae: 0.6826\n",
      "Epoch 11/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.3348 - mae: 0.5187 - val_loss: 0.2800 - val_mae: 0.5028\n",
      "Epoch 12/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.3278 - mae: 0.5153 - val_loss: 0.2711 - val_mae: 0.5000\n",
      "Epoch 13/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.3145 - mae: 0.5094 - val_loss: 0.2684 - val_mae: 0.5000\n",
      "Epoch 14/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.3176 - mae: 0.5131 - val_loss: 0.2948 - val_mae: 0.5019\n",
      "Epoch 15/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.3180 - mae: 0.5092 - val_loss: 0.2787 - val_mae: 0.5027\n",
      "Epoch 16/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2898 - mae: 0.5032 - val_loss: 0.2843 - val_mae: 0.5030\n",
      "Epoch 17/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2853 - mae: 0.5028 - val_loss: 0.7707 - val_mae: 0.6876\n",
      "Epoch 18/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.3065 - mae: 0.5099 - val_loss: 0.5345 - val_mae: 0.5898\n",
      "Epoch 19/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.3054 - mae: 0.5092 - val_loss: 0.2644 - val_mae: 0.5000\n",
      "Epoch 20/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.3016 - mae: 0.5119 - val_loss: 0.2589 - val_mae: 0.5000\n",
      "Epoch 21/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2722 - mae: 0.5013 - val_loss: 0.2601 - val_mae: 0.5000\n",
      "Epoch 22/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2917 - mae: 0.5038 - val_loss: 0.2637 - val_mae: 0.5000\n",
      "Epoch 23/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2811 - mae: 0.5025 - val_loss: 0.2588 - val_mae: 0.5000\n",
      "Epoch 24/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2815 - mae: 0.5031 - val_loss: 0.2584 - val_mae: 0.5000\n",
      "Epoch 25/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2849 - mae: 0.5016 - val_loss: 0.2596 - val_mae: 0.5000\n",
      "Epoch 26/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2712 - mae: 0.5006 - val_loss: 0.3691 - val_mae: 0.5264\n",
      "Epoch 27/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2817 - mae: 0.5031 - val_loss: 0.2712 - val_mae: 0.5000\n",
      "Epoch 28/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2764 - mae: 0.5028 - val_loss: 0.2661 - val_mae: 0.5000\n",
      "Epoch 29/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2689 - mae: 0.5011 - val_loss: 0.2651 - val_mae: 0.5000\n",
      "Epoch 30/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2667 - mae: 0.5002 - val_loss: 0.2576 - val_mae: 0.5000\n",
      "Epoch 31/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2744 - mae: 0.5018 - val_loss: 0.2666 - val_mae: 0.5011\n",
      "Epoch 32/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2701 - mae: 0.5007 - val_loss: 0.2684 - val_mae: 0.5007\n",
      "Epoch 33/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2650 - mae: 0.5000 - val_loss: 0.3300 - val_mae: 0.5129\n",
      "Epoch 34/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2701 - mae: 0.5018 - val_loss: 0.2717 - val_mae: 0.5001\n",
      "Epoch 35/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2648 - mae: 0.5011 - val_loss: 0.2701 - val_mae: 0.5012\n",
      "Epoch 36/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2616 - mae: 0.5000 - val_loss: 0.2634 - val_mae: 0.5000\n",
      "Epoch 37/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2620 - mae: 0.5001 - val_loss: 0.3548 - val_mae: 0.5218\n",
      "Epoch 38/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2616 - mae: 0.5014 - val_loss: 0.2553 - val_mae: 0.5000\n",
      "Epoch 39/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2614 - mae: 0.5003 - val_loss: 0.2600 - val_mae: 0.5000\n",
      "Epoch 40/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2608 - mae: 0.5002 - val_loss: 0.2601 - val_mae: 0.5000\n",
      "Epoch 41/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2595 - mae: 0.5000 - val_loss: 0.2672 - val_mae: 0.5000\n",
      "Epoch 42/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2605 - mae: 0.5001 - val_loss: 0.2672 - val_mae: 0.5013\n",
      "Epoch 43/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2566 - mae: 0.5000 - val_loss: 0.2543 - val_mae: 0.5000\n",
      "Epoch 44/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2578 - mae: 0.5000 - val_loss: 0.2559 - val_mae: 0.5000\n",
      "Epoch 45/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2562 - mae: 0.5001 - val_loss: 0.2552 - val_mae: 0.5000\n",
      "Epoch 46/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2556 - mae: 0.5000 - val_loss: 0.2540 - val_mae: 0.5000\n",
      "Epoch 47/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2546 - mae: 0.5000 - val_loss: 0.2549 - val_mae: 0.5000\n",
      "Epoch 48/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2562 - mae: 0.5000 - val_loss: 0.2536 - val_mae: 0.5000\n",
      "Epoch 49/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2552 - mae: 0.5000 - val_loss: 0.2549 - val_mae: 0.5000\n",
      "Epoch 50/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2540 - mae: 0.5000 - val_loss: 0.2535 - val_mae: 0.5000\n",
      "Epoch 51/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2541 - mae: 0.5000 - val_loss: 0.2538 - val_mae: 0.5000\n",
      "Epoch 52/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2547 - mae: 0.5000 - val_loss: 0.2527 - val_mae: 0.5000\n",
      "Epoch 53/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2541 - mae: 0.5000 - val_loss: 0.2539 - val_mae: 0.5000\n",
      "Epoch 54/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2536 - mae: 0.5000 - val_loss: 0.2525 - val_mae: 0.5000\n",
      "Epoch 55/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2538 - mae: 0.5000 - val_loss: 0.2553 - val_mae: 0.5000\n",
      "Epoch 56/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2532 - mae: 0.5000 - val_loss: 0.2527 - val_mae: 0.5000\n",
      "Epoch 57/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2537 - mae: 0.5000 - val_loss: 0.2578 - val_mae: 0.5000\n",
      "Epoch 58/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2545 - mae: 0.5003 - val_loss: 0.2617 - val_mae: 0.5000\n",
      "Epoch 59/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2526 - mae: 0.5000 - val_loss: 0.2538 - val_mae: 0.5000\n",
      "Epoch 60/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2531 - mae: 0.5000 - val_loss: 0.2519 - val_mae: 0.5000\n",
      "Epoch 61/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2529 - mae: 0.5000 - val_loss: 0.2527 - val_mae: 0.5000\n",
      "Epoch 62/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2525 - mae: 0.5000 - val_loss: 0.2522 - val_mae: 0.5000\n",
      "Epoch 63/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2533 - mae: 0.5000 - val_loss: 0.2531 - val_mae: 0.5000\n",
      "Epoch 64/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2525 - mae: 0.5000 - val_loss: 0.2600 - val_mae: 0.5001\n",
      "Epoch 65/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2528 - mae: 0.5000 - val_loss: 0.2523 - val_mae: 0.5000\n",
      "Epoch 66/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2523 - mae: 0.5000 - val_loss: 0.2516 - val_mae: 0.5000\n",
      "Epoch 67/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2525 - mae: 0.5000 - val_loss: 0.2563 - val_mae: 0.5000\n",
      "Epoch 68/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2520 - mae: 0.5000 - val_loss: 0.2529 - val_mae: 0.5000\n",
      "Epoch 69/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2529 - mae: 0.5000 - val_loss: 0.2517 - val_mae: 0.5000\n",
      "Epoch 70/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2523 - mae: 0.5000 - val_loss: 0.2537 - val_mae: 0.5000\n",
      "Epoch 71/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2521 - mae: 0.5000 - val_loss: 0.2513 - val_mae: 0.5000\n",
      "Epoch 72/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2516 - mae: 0.5000 - val_loss: 0.2510 - val_mae: 0.5000\n",
      "Epoch 73/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2519 - mae: 0.5000 - val_loss: 0.2512 - val_mae: 0.5000\n",
      "Epoch 74/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2520 - mae: 0.5000 - val_loss: 0.2517 - val_mae: 0.5000\n",
      "Epoch 75/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2516 - mae: 0.5000 - val_loss: 0.2519 - val_mae: 0.5000\n",
      "Epoch 76/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2517 - mae: 0.5000 - val_loss: 0.2566 - val_mae: 0.5000\n",
      "Epoch 77/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2518 - mae: 0.5000 - val_loss: 0.2508 - val_mae: 0.5000\n",
      "Epoch 78/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2513 - mae: 0.5000 - val_loss: 0.2515 - val_mae: 0.5000\n",
      "Epoch 79/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2516 - mae: 0.5000 - val_loss: 0.2508 - val_mae: 0.5000\n",
      "Epoch 80/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2512 - mae: 0.5000 - val_loss: 0.2542 - val_mae: 0.5000\n",
      "Epoch 81/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2514 - mae: 0.5000 - val_loss: 0.2519 - val_mae: 0.5000\n",
      "Epoch 82/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2513 - mae: 0.5000 - val_loss: 0.2514 - val_mae: 0.5000\n",
      "Epoch 83/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2523 - mae: 0.5001 - val_loss: 0.2516 - val_mae: 0.5000\n",
      "Epoch 84/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2509 - mae: 0.5000 - val_loss: 0.2505 - val_mae: 0.5000\n",
      "Epoch 85/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2510 - mae: 0.5000 - val_loss: 0.2511 - val_mae: 0.5000\n",
      "Epoch 86/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2509 - mae: 0.5000 - val_loss: 0.2528 - val_mae: 0.5000\n",
      "Epoch 87/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2511 - mae: 0.5000 - val_loss: 0.2504 - val_mae: 0.5000\n",
      "Epoch 88/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2508 - mae: 0.5000 - val_loss: 0.2505 - val_mae: 0.5000\n",
      "Epoch 89/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2508 - mae: 0.5000 - val_loss: 0.2505 - val_mae: 0.5000\n",
      "Epoch 90/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2508 - mae: 0.5000 - val_loss: 0.2507 - val_mae: 0.5000\n",
      "Epoch 91/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2509 - mae: 0.5000 - val_loss: 0.2506 - val_mae: 0.5000\n",
      "Epoch 92/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2506 - mae: 0.5000 - val_loss: 0.2503 - val_mae: 0.5000\n",
      "Epoch 93/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2506 - mae: 0.5000 - val_loss: 0.2512 - val_mae: 0.5000\n",
      "Epoch 94/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2507 - mae: 0.5000 - val_loss: 0.2503 - val_mae: 0.5000\n",
      "Epoch 95/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2505 - mae: 0.5000 - val_loss: 0.2517 - val_mae: 0.5000\n",
      "Epoch 96/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2507 - mae: 0.5000 - val_loss: 0.2526 - val_mae: 0.5000\n",
      "Epoch 97/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2507 - mae: 0.5000 - val_loss: 0.2524 - val_mae: 0.5000\n",
      "Epoch 98/100\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 0.2505 - mae: 0.5000 - val_loss: 0.2506 - val_mae: 0.5000\n",
      "Epoch 99/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2504 - mae: 0.5000 - val_loss: 0.2507 - val_mae: 0.5000\n",
      "Epoch 100/100\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 0.2504 - mae: 0.5000 - val_loss: 0.2507 - val_mae: 0.5000\n",
      "5/5 [==============================] - 0s 4ms/step\n",
      "MAE: 0.5\n"
     ]
    }
   ],
   "source": [
    "# 모델 학습\n",
    "history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test))\n",
    "\n",
    "# 모델 예측\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# MAE(Mean Absolute Error) 계산\n",
    "mae = np.mean(abs(y_pred - y_test))\n",
    "print('MAE:', mae)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a5cffb8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
